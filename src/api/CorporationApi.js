/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.4.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/GetCorporationsCorporationIdAlliancehistory200Ok', 'model/GetCorporationsCorporationIdAlliancehistoryInternalServerError', 'model/GetCorporationsCorporationIdIconsInternalServerError', 'model/GetCorporationsCorporationIdIconsNotFound', 'model/GetCorporationsCorporationIdIconsOk', 'model/GetCorporationsCorporationIdInternalServerError', 'model/GetCorporationsCorporationIdMembers200Ok', 'model/GetCorporationsCorporationIdMembersForbidden', 'model/GetCorporationsCorporationIdMembersInternalServerError', 'model/GetCorporationsCorporationIdNotFound', 'model/GetCorporationsCorporationIdOk', 'model/GetCorporationsCorporationIdRoles200Ok', 'model/GetCorporationsCorporationIdRolesForbidden', 'model/GetCorporationsCorporationIdRolesInternalServerError', 'model/GetCorporationsCorporationIdStructures200Ok', 'model/GetCorporationsCorporationIdStructuresForbidden', 'model/GetCorporationsCorporationIdStructuresInternalServerError', 'model/GetCorporationsNames200Ok', 'model/GetCorporationsNamesInternalServerError', 'model/GetCorporationsNpccorpsInternalServerError', 'model/PutCorporationsCorporationIdStructuresStructureIdForbidden', 'model/PutCorporationsCorporationIdStructuresStructureIdInternalServerError', 'model/PutCorporationsCorporationIdStructuresStructureIdNewSchedule'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/GetCorporationsCorporationIdAlliancehistory200Ok'), require('../model/GetCorporationsCorporationIdAlliancehistoryInternalServerError'), require('../model/GetCorporationsCorporationIdIconsInternalServerError'), require('../model/GetCorporationsCorporationIdIconsNotFound'), require('../model/GetCorporationsCorporationIdIconsOk'), require('../model/GetCorporationsCorporationIdInternalServerError'), require('../model/GetCorporationsCorporationIdMembers200Ok'), require('../model/GetCorporationsCorporationIdMembersForbidden'), require('../model/GetCorporationsCorporationIdMembersInternalServerError'), require('../model/GetCorporationsCorporationIdNotFound'), require('../model/GetCorporationsCorporationIdOk'), require('../model/GetCorporationsCorporationIdRoles200Ok'), require('../model/GetCorporationsCorporationIdRolesForbidden'), require('../model/GetCorporationsCorporationIdRolesInternalServerError'), require('../model/GetCorporationsCorporationIdStructures200Ok'), require('../model/GetCorporationsCorporationIdStructuresForbidden'), require('../model/GetCorporationsCorporationIdStructuresInternalServerError'), require('../model/GetCorporationsNames200Ok'), require('../model/GetCorporationsNamesInternalServerError'), require('../model/GetCorporationsNpccorpsInternalServerError'), require('../model/PutCorporationsCorporationIdStructuresStructureIdForbidden'), require('../model/PutCorporationsCorporationIdStructuresStructureIdInternalServerError'), require('../model/PutCorporationsCorporationIdStructuresStructureIdNewSchedule'));
  } else {
    // Browser globals (root is window)
    if (!root.EveSwaggerInterface) {
      root.EveSwaggerInterface = {};
    }
    root.EveSwaggerInterface.CorporationApi = factory(root.EveSwaggerInterface.ApiClient, root.EveSwaggerInterface.GetCorporationsCorporationIdAlliancehistory200Ok, root.EveSwaggerInterface.GetCorporationsCorporationIdAlliancehistoryInternalServerError, root.EveSwaggerInterface.GetCorporationsCorporationIdIconsInternalServerError, root.EveSwaggerInterface.GetCorporationsCorporationIdIconsNotFound, root.EveSwaggerInterface.GetCorporationsCorporationIdIconsOk, root.EveSwaggerInterface.GetCorporationsCorporationIdInternalServerError, root.EveSwaggerInterface.GetCorporationsCorporationIdMembers200Ok, root.EveSwaggerInterface.GetCorporationsCorporationIdMembersForbidden, root.EveSwaggerInterface.GetCorporationsCorporationIdMembersInternalServerError, root.EveSwaggerInterface.GetCorporationsCorporationIdNotFound, root.EveSwaggerInterface.GetCorporationsCorporationIdOk, root.EveSwaggerInterface.GetCorporationsCorporationIdRoles200Ok, root.EveSwaggerInterface.GetCorporationsCorporationIdRolesForbidden, root.EveSwaggerInterface.GetCorporationsCorporationIdRolesInternalServerError, root.EveSwaggerInterface.GetCorporationsCorporationIdStructures200Ok, root.EveSwaggerInterface.GetCorporationsCorporationIdStructuresForbidden, root.EveSwaggerInterface.GetCorporationsCorporationIdStructuresInternalServerError, root.EveSwaggerInterface.GetCorporationsNames200Ok, root.EveSwaggerInterface.GetCorporationsNamesInternalServerError, root.EveSwaggerInterface.GetCorporationsNpccorpsInternalServerError, root.EveSwaggerInterface.PutCorporationsCorporationIdStructuresStructureIdForbidden, root.EveSwaggerInterface.PutCorporationsCorporationIdStructuresStructureIdInternalServerError, root.EveSwaggerInterface.PutCorporationsCorporationIdStructuresStructureIdNewSchedule);
  }
}(this, function(ApiClient, GetCorporationsCorporationIdAlliancehistory200Ok, GetCorporationsCorporationIdAlliancehistoryInternalServerError, GetCorporationsCorporationIdIconsInternalServerError, GetCorporationsCorporationIdIconsNotFound, GetCorporationsCorporationIdIconsOk, GetCorporationsCorporationIdInternalServerError, GetCorporationsCorporationIdMembers200Ok, GetCorporationsCorporationIdMembersForbidden, GetCorporationsCorporationIdMembersInternalServerError, GetCorporationsCorporationIdNotFound, GetCorporationsCorporationIdOk, GetCorporationsCorporationIdRoles200Ok, GetCorporationsCorporationIdRolesForbidden, GetCorporationsCorporationIdRolesInternalServerError, GetCorporationsCorporationIdStructures200Ok, GetCorporationsCorporationIdStructuresForbidden, GetCorporationsCorporationIdStructuresInternalServerError, GetCorporationsNames200Ok, GetCorporationsNamesInternalServerError, GetCorporationsNpccorpsInternalServerError, PutCorporationsCorporationIdStructuresStructureIdForbidden, PutCorporationsCorporationIdStructuresStructureIdInternalServerError, PutCorporationsCorporationIdStructuresStructureIdNewSchedule) {
  'use strict';

  /**
   * Corporation service.
   * @module api/CorporationApi
   * @version 0.4.1
   */

  /**
   * Constructs a new CorporationApi. 
   * @alias module:api/CorporationApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getCorporationsCorporationId operation.
     * @callback module:api/CorporationApi~getCorporationsCorporationIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCorporationsCorporationIdOk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get corporation information
     * Public information about a corporation  ---  Alternate route: &#x60;/v3/corporations/{corporation_id}/&#x60;  Alternate route: &#x60;/dev/corporations/{corporation_id}/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param {Number} corporationId An Eve corporation ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/CorporationApi~getCorporationsCorporationIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCorporationsCorporationIdOk}
     */
    this.getCorporationsCorporationId = function(corporationId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'corporationId' is set
      if (corporationId == undefined || corporationId == null) {
        throw new Error("Missing the required parameter 'corporationId' when calling getCorporationsCorporationId");
      }


      var pathParams = {
        'corporation_id': corporationId
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetCorporationsCorporationIdOk;

      return this.apiClient.callApi(
        '/corporations/{corporation_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCorporationsCorporationIdAlliancehistory operation.
     * @callback module:api/CorporationApi~getCorporationsCorporationIdAlliancehistoryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetCorporationsCorporationIdAlliancehistory200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get alliance history
     * Get a list of all the alliances a corporation has been a member of  ---  Alternate route: &#x60;/v1/corporations/{corporation_id}/alliancehistory/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/alliancehistory/&#x60;  Alternate route: &#x60;/dev/corporations/{corporation_id}/alliancehistory/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param {Number} corporationId An EVE corporation ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/CorporationApi~getCorporationsCorporationIdAlliancehistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetCorporationsCorporationIdAlliancehistory200Ok>}
     */
    this.getCorporationsCorporationIdAlliancehistory = function(corporationId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'corporationId' is set
      if (corporationId == undefined || corporationId == null) {
        throw new Error("Missing the required parameter 'corporationId' when calling getCorporationsCorporationIdAlliancehistory");
      }


      var pathParams = {
        'corporation_id': corporationId
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [GetCorporationsCorporationIdAlliancehistory200Ok];

      return this.apiClient.callApi(
        '/corporations/{corporation_id}/alliancehistory/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCorporationsCorporationIdIcons operation.
     * @callback module:api/CorporationApi~getCorporationsCorporationIdIconsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCorporationsCorporationIdIconsOk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get corporation icon
     * Get the icon urls for a corporation  ---  Alternate route: &#x60;/v1/corporations/{corporation_id}/icons/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/icons/&#x60;  Alternate route: &#x60;/dev/corporations/{corporation_id}/icons/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param {Number} corporationId An EVE corporation ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/CorporationApi~getCorporationsCorporationIdIconsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCorporationsCorporationIdIconsOk}
     */
    this.getCorporationsCorporationIdIcons = function(corporationId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'corporationId' is set
      if (corporationId == undefined || corporationId == null) {
        throw new Error("Missing the required parameter 'corporationId' when calling getCorporationsCorporationIdIcons");
      }


      var pathParams = {
        'corporation_id': corporationId
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetCorporationsCorporationIdIconsOk;

      return this.apiClient.callApi(
        '/corporations/{corporation_id}/icons/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCorporationsCorporationIdMembers operation.
     * @callback module:api/CorporationApi~getCorporationsCorporationIdMembersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetCorporationsCorporationIdMembers200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get corporation members
     * Read the current list of members if the calling character is a member.  ---  Alternate route: &#x60;/v2/corporations/{corporation_id}/members/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/members/&#x60;  Alternate route: &#x60;/dev/corporations/{corporation_id}/members/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param {Number} corporationId A corporation ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.token Access token to use, if preferred over a header
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/CorporationApi~getCorporationsCorporationIdMembersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetCorporationsCorporationIdMembers200Ok>}
     */
    this.getCorporationsCorporationIdMembers = function(corporationId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'corporationId' is set
      if (corporationId == undefined || corporationId == null) {
        throw new Error("Missing the required parameter 'corporationId' when calling getCorporationsCorporationIdMembers");
      }


      var pathParams = {
        'corporation_id': corporationId
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = ['evesso'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [GetCorporationsCorporationIdMembers200Ok];

      return this.apiClient.callApi(
        '/corporations/{corporation_id}/members/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCorporationsCorporationIdRoles operation.
     * @callback module:api/CorporationApi~getCorporationsCorporationIdRolesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetCorporationsCorporationIdRoles200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get corporation member roles
     * Return the roles of all members if the character has the personnel manager role or any grantable role.  ---  Alternate route: &#x60;/v1/corporations/{corporation_id}/roles/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/roles/&#x60;  Alternate route: &#x60;/dev/corporations/{corporation_id}/roles/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param {Number} corporationId A corporation ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.token Access token to use, if preferred over a header
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/CorporationApi~getCorporationsCorporationIdRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetCorporationsCorporationIdRoles200Ok>}
     */
    this.getCorporationsCorporationIdRoles = function(corporationId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'corporationId' is set
      if (corporationId == undefined || corporationId == null) {
        throw new Error("Missing the required parameter 'corporationId' when calling getCorporationsCorporationIdRoles");
      }


      var pathParams = {
        'corporation_id': corporationId
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = ['evesso'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [GetCorporationsCorporationIdRoles200Ok];

      return this.apiClient.callApi(
        '/corporations/{corporation_id}/roles/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCorporationsCorporationIdStructures operation.
     * @callback module:api/CorporationApi~getCorporationsCorporationIdStructuresCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetCorporationsCorporationIdStructures200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get corporation structures
     * Get a list of corporation structures  ---  Alternate route: &#x60;/v1/corporations/{corporation_id}/structures/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/structures/&#x60;  Alternate route: &#x60;/dev/corporations/{corporation_id}/structures/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param {Number} corporationId A corporation ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {module:model/String} opts.language Language to use in the response (default to en-us)
     * @param {Number} opts.page Which page to query, 250 structures per page
     * @param {String} opts.token Access token to use, if preferred over a header
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/CorporationApi~getCorporationsCorporationIdStructuresCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetCorporationsCorporationIdStructures200Ok>}
     */
    this.getCorporationsCorporationIdStructures = function(corporationId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'corporationId' is set
      if (corporationId == undefined || corporationId == null) {
        throw new Error("Missing the required parameter 'corporationId' when calling getCorporationsCorporationIdStructures");
      }


      var pathParams = {
        'corporation_id': corporationId
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'language': opts['language'],
        'page': opts['page'],
        'token': opts['token'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = ['evesso'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [GetCorporationsCorporationIdStructures200Ok];

      return this.apiClient.callApi(
        '/corporations/{corporation_id}/structures/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCorporationsNames operation.
     * @callback module:api/CorporationApi~getCorporationsNamesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetCorporationsNames200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get corporation names
     * Resolve a set of corporation IDs to corporation names  ---  Alternate route: &#x60;/v1/corporations/names/&#x60;  Alternate route: &#x60;/legacy/corporations/names/&#x60;  Alternate route: &#x60;/dev/corporations/names/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param {Array.<Number>} corporationIds A comma separated list of corporation IDs
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/CorporationApi~getCorporationsNamesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetCorporationsNames200Ok>}
     */
    this.getCorporationsNames = function(corporationIds, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'corporationIds' is set
      if (corporationIds == undefined || corporationIds == null) {
        throw new Error("Missing the required parameter 'corporationIds' when calling getCorporationsNames");
      }


      var pathParams = {
      };
      var queryParams = {
        'corporation_ids': this.apiClient.buildCollectionParam(corporationIds, 'multi'),
        'datasource': opts['datasource'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [GetCorporationsNames200Ok];

      return this.apiClient.callApi(
        '/corporations/names/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCorporationsNpccorps operation.
     * @callback module:api/CorporationApi~getCorporationsNpccorpsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'Number'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get npc corporations
     * Get a list of npc corporations  ---  Alternate route: &#x60;/v1/corporations/npccorps/&#x60;  Alternate route: &#x60;/legacy/corporations/npccorps/&#x60;  Alternate route: &#x60;/dev/corporations/npccorps/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/CorporationApi~getCorporationsNpccorpsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'Number'>}
     */
    this.getCorporationsNpccorps = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['Number'];

      return this.apiClient.callApi(
        '/corporations/npccorps/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putCorporationsCorporationIdStructuresStructureId operation.
     * @callback module:api/CorporationApi~putCorporationsCorporationIdStructuresStructureIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update structure vulnerability schedule
     * Update the vulnerability window schedule of a corporation structure  ---  Alternate route: &#x60;/v1/corporations/{corporation_id}/structures/{structure_id}/&#x60;  Alternate route: &#x60;/legacy/corporations/{corporation_id}/structures/{structure_id}/&#x60;  Alternate route: &#x60;/dev/corporations/{corporation_id}/structures/{structure_id}/&#x60; 
     * @param {Number} corporationId A corporation ID
     * @param {Array.<module:model/PutCorporationsCorporationIdStructuresStructureIdNewSchedule>} newSchedule New vulnerability window schedule for the structure
     * @param {Number} structureId A structure ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.token Access token to use, if preferred over a header
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/CorporationApi~putCorporationsCorporationIdStructuresStructureIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putCorporationsCorporationIdStructuresStructureId = function(corporationId, newSchedule, structureId, opts, callback) {
      opts = opts || {};
      var postBody = newSchedule;

      // verify the required parameter 'corporationId' is set
      if (corporationId == undefined || corporationId == null) {
        throw new Error("Missing the required parameter 'corporationId' when calling putCorporationsCorporationIdStructuresStructureId");
      }

      // verify the required parameter 'newSchedule' is set
      if (newSchedule == undefined || newSchedule == null) {
        throw new Error("Missing the required parameter 'newSchedule' when calling putCorporationsCorporationIdStructuresStructureId");
      }

      // verify the required parameter 'structureId' is set
      if (structureId == undefined || structureId == null) {
        throw new Error("Missing the required parameter 'structureId' when calling putCorporationsCorporationIdStructuresStructureId");
      }


      var pathParams = {
        'corporation_id': corporationId,
        'structure_id': structureId
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = ['evesso'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/corporations/{corporation_id}/structures/{structure_id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
