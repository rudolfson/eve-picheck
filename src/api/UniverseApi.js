/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.4.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/GetUniverseBloodlines200Ok', 'model/GetUniverseBloodlinesInternalServerError', 'model/GetUniverseCategoriesCategoryIdInternalServerError', 'model/GetUniverseCategoriesCategoryIdNotFound', 'model/GetUniverseCategoriesCategoryIdOk', 'model/GetUniverseCategoriesInternalServerError', 'model/GetUniverseConstellationsConstellationIdInternalServerError', 'model/GetUniverseConstellationsConstellationIdNotFound', 'model/GetUniverseConstellationsConstellationIdOk', 'model/GetUniverseConstellationsInternalServerError', 'model/GetUniverseFactions200Ok', 'model/GetUniverseFactionsInternalServerError', 'model/GetUniverseGraphicsGraphicIdInternalServerError', 'model/GetUniverseGraphicsGraphicIdNotFound', 'model/GetUniverseGraphicsGraphicIdOk', 'model/GetUniverseGraphicsInternalServerError', 'model/GetUniverseGroupsGroupIdInternalServerError', 'model/GetUniverseGroupsGroupIdNotFound', 'model/GetUniverseGroupsGroupIdOk', 'model/GetUniverseGroupsInternalServerError', 'model/GetUniverseMoonsMoonIdInternalServerError', 'model/GetUniverseMoonsMoonIdNotFound', 'model/GetUniverseMoonsMoonIdOk', 'model/GetUniversePlanetsPlanetIdInternalServerError', 'model/GetUniversePlanetsPlanetIdNotFound', 'model/GetUniversePlanetsPlanetIdOk', 'model/GetUniverseRaces200Ok', 'model/GetUniverseRacesInternalServerError', 'model/GetUniverseRegionsInternalServerError', 'model/GetUniverseRegionsRegionIdInternalServerError', 'model/GetUniverseRegionsRegionIdNotFound', 'model/GetUniverseRegionsRegionIdOk', 'model/GetUniverseStargatesStargateIdInternalServerError', 'model/GetUniverseStargatesStargateIdNotFound', 'model/GetUniverseStargatesStargateIdOk', 'model/GetUniverseStationsStationIdInternalServerError', 'model/GetUniverseStationsStationIdNotFound', 'model/GetUniverseStationsStationIdOk', 'model/GetUniverseStructuresInternalServerError', 'model/GetUniverseStructuresStructureIdForbidden', 'model/GetUniverseStructuresStructureIdInternalServerError', 'model/GetUniverseStructuresStructureIdNotFound', 'model/GetUniverseStructuresStructureIdOk', 'model/GetUniverseSystemsInternalServerError', 'model/GetUniverseSystemsSystemIdInternalServerError', 'model/GetUniverseSystemsSystemIdNotFound', 'model/GetUniverseSystemsSystemIdOk', 'model/GetUniverseTypesInternalServerError', 'model/GetUniverseTypesTypeIdInternalServerError', 'model/GetUniverseTypesTypeIdNotFound', 'model/GetUniverseTypesTypeIdOk', 'model/PostUniverseNames200Ok', 'model/PostUniverseNamesInternalServerError', 'model/PostUniverseNamesNotFound'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/GetUniverseBloodlines200Ok'), require('../model/GetUniverseBloodlinesInternalServerError'), require('../model/GetUniverseCategoriesCategoryIdInternalServerError'), require('../model/GetUniverseCategoriesCategoryIdNotFound'), require('../model/GetUniverseCategoriesCategoryIdOk'), require('../model/GetUniverseCategoriesInternalServerError'), require('../model/GetUniverseConstellationsConstellationIdInternalServerError'), require('../model/GetUniverseConstellationsConstellationIdNotFound'), require('../model/GetUniverseConstellationsConstellationIdOk'), require('../model/GetUniverseConstellationsInternalServerError'), require('../model/GetUniverseFactions200Ok'), require('../model/GetUniverseFactionsInternalServerError'), require('../model/GetUniverseGraphicsGraphicIdInternalServerError'), require('../model/GetUniverseGraphicsGraphicIdNotFound'), require('../model/GetUniverseGraphicsGraphicIdOk'), require('../model/GetUniverseGraphicsInternalServerError'), require('../model/GetUniverseGroupsGroupIdInternalServerError'), require('../model/GetUniverseGroupsGroupIdNotFound'), require('../model/GetUniverseGroupsGroupIdOk'), require('../model/GetUniverseGroupsInternalServerError'), require('../model/GetUniverseMoonsMoonIdInternalServerError'), require('../model/GetUniverseMoonsMoonIdNotFound'), require('../model/GetUniverseMoonsMoonIdOk'), require('../model/GetUniversePlanetsPlanetIdInternalServerError'), require('../model/GetUniversePlanetsPlanetIdNotFound'), require('../model/GetUniversePlanetsPlanetIdOk'), require('../model/GetUniverseRaces200Ok'), require('../model/GetUniverseRacesInternalServerError'), require('../model/GetUniverseRegionsInternalServerError'), require('../model/GetUniverseRegionsRegionIdInternalServerError'), require('../model/GetUniverseRegionsRegionIdNotFound'), require('../model/GetUniverseRegionsRegionIdOk'), require('../model/GetUniverseStargatesStargateIdInternalServerError'), require('../model/GetUniverseStargatesStargateIdNotFound'), require('../model/GetUniverseStargatesStargateIdOk'), require('../model/GetUniverseStationsStationIdInternalServerError'), require('../model/GetUniverseStationsStationIdNotFound'), require('../model/GetUniverseStationsStationIdOk'), require('../model/GetUniverseStructuresInternalServerError'), require('../model/GetUniverseStructuresStructureIdForbidden'), require('../model/GetUniverseStructuresStructureIdInternalServerError'), require('../model/GetUniverseStructuresStructureIdNotFound'), require('../model/GetUniverseStructuresStructureIdOk'), require('../model/GetUniverseSystemsInternalServerError'), require('../model/GetUniverseSystemsSystemIdInternalServerError'), require('../model/GetUniverseSystemsSystemIdNotFound'), require('../model/GetUniverseSystemsSystemIdOk'), require('../model/GetUniverseTypesInternalServerError'), require('../model/GetUniverseTypesTypeIdInternalServerError'), require('../model/GetUniverseTypesTypeIdNotFound'), require('../model/GetUniverseTypesTypeIdOk'), require('../model/PostUniverseNames200Ok'), require('../model/PostUniverseNamesInternalServerError'), require('../model/PostUniverseNamesNotFound'));
  } else {
    // Browser globals (root is window)
    if (!root.EveSwaggerInterface) {
      root.EveSwaggerInterface = {};
    }
    root.EveSwaggerInterface.UniverseApi = factory(root.EveSwaggerInterface.ApiClient, root.EveSwaggerInterface.GetUniverseBloodlines200Ok, root.EveSwaggerInterface.GetUniverseBloodlinesInternalServerError, root.EveSwaggerInterface.GetUniverseCategoriesCategoryIdInternalServerError, root.EveSwaggerInterface.GetUniverseCategoriesCategoryIdNotFound, root.EveSwaggerInterface.GetUniverseCategoriesCategoryIdOk, root.EveSwaggerInterface.GetUniverseCategoriesInternalServerError, root.EveSwaggerInterface.GetUniverseConstellationsConstellationIdInternalServerError, root.EveSwaggerInterface.GetUniverseConstellationsConstellationIdNotFound, root.EveSwaggerInterface.GetUniverseConstellationsConstellationIdOk, root.EveSwaggerInterface.GetUniverseConstellationsInternalServerError, root.EveSwaggerInterface.GetUniverseFactions200Ok, root.EveSwaggerInterface.GetUniverseFactionsInternalServerError, root.EveSwaggerInterface.GetUniverseGraphicsGraphicIdInternalServerError, root.EveSwaggerInterface.GetUniverseGraphicsGraphicIdNotFound, root.EveSwaggerInterface.GetUniverseGraphicsGraphicIdOk, root.EveSwaggerInterface.GetUniverseGraphicsInternalServerError, root.EveSwaggerInterface.GetUniverseGroupsGroupIdInternalServerError, root.EveSwaggerInterface.GetUniverseGroupsGroupIdNotFound, root.EveSwaggerInterface.GetUniverseGroupsGroupIdOk, root.EveSwaggerInterface.GetUniverseGroupsInternalServerError, root.EveSwaggerInterface.GetUniverseMoonsMoonIdInternalServerError, root.EveSwaggerInterface.GetUniverseMoonsMoonIdNotFound, root.EveSwaggerInterface.GetUniverseMoonsMoonIdOk, root.EveSwaggerInterface.GetUniversePlanetsPlanetIdInternalServerError, root.EveSwaggerInterface.GetUniversePlanetsPlanetIdNotFound, root.EveSwaggerInterface.GetUniversePlanetsPlanetIdOk, root.EveSwaggerInterface.GetUniverseRaces200Ok, root.EveSwaggerInterface.GetUniverseRacesInternalServerError, root.EveSwaggerInterface.GetUniverseRegionsInternalServerError, root.EveSwaggerInterface.GetUniverseRegionsRegionIdInternalServerError, root.EveSwaggerInterface.GetUniverseRegionsRegionIdNotFound, root.EveSwaggerInterface.GetUniverseRegionsRegionIdOk, root.EveSwaggerInterface.GetUniverseStargatesStargateIdInternalServerError, root.EveSwaggerInterface.GetUniverseStargatesStargateIdNotFound, root.EveSwaggerInterface.GetUniverseStargatesStargateIdOk, root.EveSwaggerInterface.GetUniverseStationsStationIdInternalServerError, root.EveSwaggerInterface.GetUniverseStationsStationIdNotFound, root.EveSwaggerInterface.GetUniverseStationsStationIdOk, root.EveSwaggerInterface.GetUniverseStructuresInternalServerError, root.EveSwaggerInterface.GetUniverseStructuresStructureIdForbidden, root.EveSwaggerInterface.GetUniverseStructuresStructureIdInternalServerError, root.EveSwaggerInterface.GetUniverseStructuresStructureIdNotFound, root.EveSwaggerInterface.GetUniverseStructuresStructureIdOk, root.EveSwaggerInterface.GetUniverseSystemsInternalServerError, root.EveSwaggerInterface.GetUniverseSystemsSystemIdInternalServerError, root.EveSwaggerInterface.GetUniverseSystemsSystemIdNotFound, root.EveSwaggerInterface.GetUniverseSystemsSystemIdOk, root.EveSwaggerInterface.GetUniverseTypesInternalServerError, root.EveSwaggerInterface.GetUniverseTypesTypeIdInternalServerError, root.EveSwaggerInterface.GetUniverseTypesTypeIdNotFound, root.EveSwaggerInterface.GetUniverseTypesTypeIdOk, root.EveSwaggerInterface.PostUniverseNames200Ok, root.EveSwaggerInterface.PostUniverseNamesInternalServerError, root.EveSwaggerInterface.PostUniverseNamesNotFound);
  }
}(this, function(ApiClient, GetUniverseBloodlines200Ok, GetUniverseBloodlinesInternalServerError, GetUniverseCategoriesCategoryIdInternalServerError, GetUniverseCategoriesCategoryIdNotFound, GetUniverseCategoriesCategoryIdOk, GetUniverseCategoriesInternalServerError, GetUniverseConstellationsConstellationIdInternalServerError, GetUniverseConstellationsConstellationIdNotFound, GetUniverseConstellationsConstellationIdOk, GetUniverseConstellationsInternalServerError, GetUniverseFactions200Ok, GetUniverseFactionsInternalServerError, GetUniverseGraphicsGraphicIdInternalServerError, GetUniverseGraphicsGraphicIdNotFound, GetUniverseGraphicsGraphicIdOk, GetUniverseGraphicsInternalServerError, GetUniverseGroupsGroupIdInternalServerError, GetUniverseGroupsGroupIdNotFound, GetUniverseGroupsGroupIdOk, GetUniverseGroupsInternalServerError, GetUniverseMoonsMoonIdInternalServerError, GetUniverseMoonsMoonIdNotFound, GetUniverseMoonsMoonIdOk, GetUniversePlanetsPlanetIdInternalServerError, GetUniversePlanetsPlanetIdNotFound, GetUniversePlanetsPlanetIdOk, GetUniverseRaces200Ok, GetUniverseRacesInternalServerError, GetUniverseRegionsInternalServerError, GetUniverseRegionsRegionIdInternalServerError, GetUniverseRegionsRegionIdNotFound, GetUniverseRegionsRegionIdOk, GetUniverseStargatesStargateIdInternalServerError, GetUniverseStargatesStargateIdNotFound, GetUniverseStargatesStargateIdOk, GetUniverseStationsStationIdInternalServerError, GetUniverseStationsStationIdNotFound, GetUniverseStationsStationIdOk, GetUniverseStructuresInternalServerError, GetUniverseStructuresStructureIdForbidden, GetUniverseStructuresStructureIdInternalServerError, GetUniverseStructuresStructureIdNotFound, GetUniverseStructuresStructureIdOk, GetUniverseSystemsInternalServerError, GetUniverseSystemsSystemIdInternalServerError, GetUniverseSystemsSystemIdNotFound, GetUniverseSystemsSystemIdOk, GetUniverseTypesInternalServerError, GetUniverseTypesTypeIdInternalServerError, GetUniverseTypesTypeIdNotFound, GetUniverseTypesTypeIdOk, PostUniverseNames200Ok, PostUniverseNamesInternalServerError, PostUniverseNamesNotFound) {
  'use strict';

  /**
   * Universe service.
   * @module api/UniverseApi
   * @version 0.4.1
   */

  /**
   * Constructs a new UniverseApi. 
   * @alias module:api/UniverseApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getUniverseBloodlines operation.
     * @callback module:api/UniverseApi~getUniverseBloodlinesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetUniverseBloodlines200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get bloodlines
     * Get a list of bloodlines  ---  Alternate route: &#x60;/v1/universe/bloodlines/&#x60;  Alternate route: &#x60;/legacy/universe/bloodlines/&#x60;  Alternate route: &#x60;/dev/universe/bloodlines/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {module:model/String} opts.language Language to use in the response (default to en-us)
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/UniverseApi~getUniverseBloodlinesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetUniverseBloodlines200Ok>}
     */
    this.getUniverseBloodlines = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'language': opts['language'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [GetUniverseBloodlines200Ok];

      return this.apiClient.callApi(
        '/universe/bloodlines/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUniverseCategories operation.
     * @callback module:api/UniverseApi~getUniverseCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'Number'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get item categories
     * Get a list of item categories  ---  Alternate route: &#x60;/v1/universe/categories/&#x60;  Alternate route: &#x60;/legacy/universe/categories/&#x60;  Alternate route: &#x60;/dev/universe/categories/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/UniverseApi~getUniverseCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'Number'>}
     */
    this.getUniverseCategories = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['Number'];

      return this.apiClient.callApi(
        '/universe/categories/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUniverseCategoriesCategoryId operation.
     * @callback module:api/UniverseApi~getUniverseCategoriesCategoryIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetUniverseCategoriesCategoryIdOk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get item category information
     * Get information of an item category  ---  Alternate route: &#x60;/v1/universe/categories/{category_id}/&#x60;  Alternate route: &#x60;/legacy/universe/categories/{category_id}/&#x60;  Alternate route: &#x60;/dev/universe/categories/{category_id}/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param {Number} categoryId An Eve item category ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {module:model/String} opts.language Language to use in the response (default to en-us)
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/UniverseApi~getUniverseCategoriesCategoryIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetUniverseCategoriesCategoryIdOk}
     */
    this.getUniverseCategoriesCategoryId = function(categoryId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'categoryId' is set
      if (categoryId == undefined || categoryId == null) {
        throw new Error("Missing the required parameter 'categoryId' when calling getUniverseCategoriesCategoryId");
      }


      var pathParams = {
        'category_id': categoryId
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'language': opts['language'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetUniverseCategoriesCategoryIdOk;

      return this.apiClient.callApi(
        '/universe/categories/{category_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUniverseConstellations operation.
     * @callback module:api/UniverseApi~getUniverseConstellationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'Number'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get constellations
     * Get a list of constellations  ---  Alternate route: &#x60;/v1/universe/constellations/&#x60;  Alternate route: &#x60;/legacy/universe/constellations/&#x60;  Alternate route: &#x60;/dev/universe/constellations/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/UniverseApi~getUniverseConstellationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'Number'>}
     */
    this.getUniverseConstellations = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['Number'];

      return this.apiClient.callApi(
        '/universe/constellations/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUniverseConstellationsConstellationId operation.
     * @callback module:api/UniverseApi~getUniverseConstellationsConstellationIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetUniverseConstellationsConstellationIdOk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get constellation information
     * Get information on a constellation  ---  Alternate route: &#x60;/v1/universe/constellations/{constellation_id}/&#x60;  Alternate route: &#x60;/legacy/universe/constellations/{constellation_id}/&#x60;  Alternate route: &#x60;/dev/universe/constellations/{constellation_id}/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param {Number} constellationId constellation_id integer
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {module:model/String} opts.language Language to use in the response (default to en-us)
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/UniverseApi~getUniverseConstellationsConstellationIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetUniverseConstellationsConstellationIdOk}
     */
    this.getUniverseConstellationsConstellationId = function(constellationId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'constellationId' is set
      if (constellationId == undefined || constellationId == null) {
        throw new Error("Missing the required parameter 'constellationId' when calling getUniverseConstellationsConstellationId");
      }


      var pathParams = {
        'constellation_id': constellationId
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'language': opts['language'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetUniverseConstellationsConstellationIdOk;

      return this.apiClient.callApi(
        '/universe/constellations/{constellation_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUniverseFactions operation.
     * @callback module:api/UniverseApi~getUniverseFactionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetUniverseFactions200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get factions
     * Get a list of factions  ---  Alternate route: &#x60;/v1/universe/factions/&#x60;  Alternate route: &#x60;/legacy/universe/factions/&#x60;  Alternate route: &#x60;/dev/universe/factions/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {module:model/String} opts.language Language to use in the response (default to en-us)
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/UniverseApi~getUniverseFactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetUniverseFactions200Ok>}
     */
    this.getUniverseFactions = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'language': opts['language'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [GetUniverseFactions200Ok];

      return this.apiClient.callApi(
        '/universe/factions/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUniverseGraphics operation.
     * @callback module:api/UniverseApi~getUniverseGraphicsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'Number'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get graphics
     * Get a list of graphics  ---  Alternate route: &#x60;/v1/universe/graphics/&#x60;  Alternate route: &#x60;/legacy/universe/graphics/&#x60;  Alternate route: &#x60;/dev/universe/graphics/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/UniverseApi~getUniverseGraphicsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'Number'>}
     */
    this.getUniverseGraphics = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['Number'];

      return this.apiClient.callApi(
        '/universe/graphics/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUniverseGraphicsGraphicId operation.
     * @callback module:api/UniverseApi~getUniverseGraphicsGraphicIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetUniverseGraphicsGraphicIdOk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get graphic information
     * Get information on a graphic  ---  Alternate route: &#x60;/v1/universe/graphics/{graphic_id}/&#x60;  Alternate route: &#x60;/legacy/universe/graphics/{graphic_id}/&#x60;  Alternate route: &#x60;/dev/universe/graphics/{graphic_id}/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param {Number} graphicId graphic_id integer
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/UniverseApi~getUniverseGraphicsGraphicIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetUniverseGraphicsGraphicIdOk}
     */
    this.getUniverseGraphicsGraphicId = function(graphicId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'graphicId' is set
      if (graphicId == undefined || graphicId == null) {
        throw new Error("Missing the required parameter 'graphicId' when calling getUniverseGraphicsGraphicId");
      }


      var pathParams = {
        'graphic_id': graphicId
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetUniverseGraphicsGraphicIdOk;

      return this.apiClient.callApi(
        '/universe/graphics/{graphic_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUniverseGroups operation.
     * @callback module:api/UniverseApi~getUniverseGroupsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'Number'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get item groups
     * Get a list of item groups  ---  Alternate route: &#x60;/v1/universe/groups/&#x60;  Alternate route: &#x60;/legacy/universe/groups/&#x60;  Alternate route: &#x60;/dev/universe/groups/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {Number} opts.page Which page to query
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/UniverseApi~getUniverseGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'Number'>}
     */
    this.getUniverseGroups = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'page': opts['page'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['Number'];

      return this.apiClient.callApi(
        '/universe/groups/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUniverseGroupsGroupId operation.
     * @callback module:api/UniverseApi~getUniverseGroupsGroupIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetUniverseGroupsGroupIdOk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get item group information
     * Get information on an item group  ---  Alternate route: &#x60;/v1/universe/groups/{group_id}/&#x60;  Alternate route: &#x60;/legacy/universe/groups/{group_id}/&#x60;  Alternate route: &#x60;/dev/universe/groups/{group_id}/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param {Number} groupId An Eve item group ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {module:model/String} opts.language Language to use in the response (default to en-us)
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/UniverseApi~getUniverseGroupsGroupIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetUniverseGroupsGroupIdOk}
     */
    this.getUniverseGroupsGroupId = function(groupId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'groupId' is set
      if (groupId == undefined || groupId == null) {
        throw new Error("Missing the required parameter 'groupId' when calling getUniverseGroupsGroupId");
      }


      var pathParams = {
        'group_id': groupId
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'language': opts['language'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetUniverseGroupsGroupIdOk;

      return this.apiClient.callApi(
        '/universe/groups/{group_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUniverseMoonsMoonId operation.
     * @callback module:api/UniverseApi~getUniverseMoonsMoonIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetUniverseMoonsMoonIdOk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get moon information
     * Get information on a moon  ---  Alternate route: &#x60;/v1/universe/moons/{moon_id}/&#x60;  Alternate route: &#x60;/legacy/universe/moons/{moon_id}/&#x60;  Alternate route: &#x60;/dev/universe/moons/{moon_id}/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param {Number} moonId moon_id integer
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/UniverseApi~getUniverseMoonsMoonIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetUniverseMoonsMoonIdOk}
     */
    this.getUniverseMoonsMoonId = function(moonId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'moonId' is set
      if (moonId == undefined || moonId == null) {
        throw new Error("Missing the required parameter 'moonId' when calling getUniverseMoonsMoonId");
      }


      var pathParams = {
        'moon_id': moonId
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetUniverseMoonsMoonIdOk;

      return this.apiClient.callApi(
        '/universe/moons/{moon_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUniversePlanetsPlanetId operation.
     * @callback module:api/UniverseApi~getUniversePlanetsPlanetIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetUniversePlanetsPlanetIdOk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get planet information
     * Get information on a planet  ---  Alternate route: &#x60;/v1/universe/planets/{planet_id}/&#x60;  Alternate route: &#x60;/legacy/universe/planets/{planet_id}/&#x60;  Alternate route: &#x60;/dev/universe/planets/{planet_id}/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param {Number} planetId planet_id integer
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/UniverseApi~getUniversePlanetsPlanetIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetUniversePlanetsPlanetIdOk}
     */
    this.getUniversePlanetsPlanetId = function(planetId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'planetId' is set
      if (planetId == undefined || planetId == null) {
        throw new Error("Missing the required parameter 'planetId' when calling getUniversePlanetsPlanetId");
      }


      var pathParams = {
        'planet_id': planetId
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetUniversePlanetsPlanetIdOk;

      return this.apiClient.callApi(
        '/universe/planets/{planet_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUniverseRaces operation.
     * @callback module:api/UniverseApi~getUniverseRacesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetUniverseRaces200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get character races
     * Get a list of character races  ---  Alternate route: &#x60;/v1/universe/races/&#x60;  Alternate route: &#x60;/legacy/universe/races/&#x60;  Alternate route: &#x60;/dev/universe/races/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {module:model/String} opts.language Language to use in the response (default to en-us)
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/UniverseApi~getUniverseRacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetUniverseRaces200Ok>}
     */
    this.getUniverseRaces = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'language': opts['language'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [GetUniverseRaces200Ok];

      return this.apiClient.callApi(
        '/universe/races/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUniverseRegions operation.
     * @callback module:api/UniverseApi~getUniverseRegionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'Number'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get regions
     * Get a list of regions  ---  Alternate route: &#x60;/v1/universe/regions/&#x60;  Alternate route: &#x60;/legacy/universe/regions/&#x60;  Alternate route: &#x60;/dev/universe/regions/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/UniverseApi~getUniverseRegionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'Number'>}
     */
    this.getUniverseRegions = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['Number'];

      return this.apiClient.callApi(
        '/universe/regions/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUniverseRegionsRegionId operation.
     * @callback module:api/UniverseApi~getUniverseRegionsRegionIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetUniverseRegionsRegionIdOk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get region information
     * Get information on a region  ---  Alternate route: &#x60;/v1/universe/regions/{region_id}/&#x60;  Alternate route: &#x60;/legacy/universe/regions/{region_id}/&#x60;  Alternate route: &#x60;/dev/universe/regions/{region_id}/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param {Number} regionId region_id integer
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {module:model/String} opts.language Language to use in the response (default to en-us)
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/UniverseApi~getUniverseRegionsRegionIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetUniverseRegionsRegionIdOk}
     */
    this.getUniverseRegionsRegionId = function(regionId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'regionId' is set
      if (regionId == undefined || regionId == null) {
        throw new Error("Missing the required parameter 'regionId' when calling getUniverseRegionsRegionId");
      }


      var pathParams = {
        'region_id': regionId
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'language': opts['language'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetUniverseRegionsRegionIdOk;

      return this.apiClient.callApi(
        '/universe/regions/{region_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUniverseStargatesStargateId operation.
     * @callback module:api/UniverseApi~getUniverseStargatesStargateIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetUniverseStargatesStargateIdOk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get stargate information
     * Get information on a stargate  ---  Alternate route: &#x60;/v1/universe/stargates/{stargate_id}/&#x60;  Alternate route: &#x60;/legacy/universe/stargates/{stargate_id}/&#x60;  Alternate route: &#x60;/dev/universe/stargates/{stargate_id}/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param {Number} stargateId stargate_id integer
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/UniverseApi~getUniverseStargatesStargateIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetUniverseStargatesStargateIdOk}
     */
    this.getUniverseStargatesStargateId = function(stargateId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'stargateId' is set
      if (stargateId == undefined || stargateId == null) {
        throw new Error("Missing the required parameter 'stargateId' when calling getUniverseStargatesStargateId");
      }


      var pathParams = {
        'stargate_id': stargateId
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetUniverseStargatesStargateIdOk;

      return this.apiClient.callApi(
        '/universe/stargates/{stargate_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUniverseStationsStationId operation.
     * @callback module:api/UniverseApi~getUniverseStationsStationIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetUniverseStationsStationIdOk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get station information
     * Get information on a station  ---  Alternate route: &#x60;/v2/universe/stations/{station_id}/&#x60;  Alternate route: &#x60;/dev/universe/stations/{station_id}/&#x60;   ---  This route is cached for up to 300 seconds
     * @param {Number} stationId station_id integer
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/UniverseApi~getUniverseStationsStationIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetUniverseStationsStationIdOk}
     */
    this.getUniverseStationsStationId = function(stationId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'stationId' is set
      if (stationId == undefined || stationId == null) {
        throw new Error("Missing the required parameter 'stationId' when calling getUniverseStationsStationId");
      }


      var pathParams = {
        'station_id': stationId
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetUniverseStationsStationIdOk;

      return this.apiClient.callApi(
        '/universe/stations/{station_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUniverseStructures operation.
     * @callback module:api/UniverseApi~getUniverseStructuresCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'Number'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all public structures
     * List all public structures  ---  Alternate route: &#x60;/v1/universe/structures/&#x60;  Alternate route: &#x60;/legacy/universe/structures/&#x60;  Alternate route: &#x60;/dev/universe/structures/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/UniverseApi~getUniverseStructuresCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'Number'>}
     */
    this.getUniverseStructures = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['Number'];

      return this.apiClient.callApi(
        '/universe/structures/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUniverseStructuresStructureId operation.
     * @callback module:api/UniverseApi~getUniverseStructuresStructureIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetUniverseStructuresStructureIdOk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get structure information
     * Returns information on requested structure, if you are on the ACL. Otherwise, returns \&quot;Forbidden\&quot; for all inputs.  ---  Alternate route: &#x60;/v1/universe/structures/{structure_id}/&#x60;  Alternate route: &#x60;/legacy/universe/structures/{structure_id}/&#x60;  Alternate route: &#x60;/dev/universe/structures/{structure_id}/&#x60; 
     * @param {Number} structureId An Eve structure ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.token Access token to use, if preferred over a header
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/UniverseApi~getUniverseStructuresStructureIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetUniverseStructuresStructureIdOk}
     */
    this.getUniverseStructuresStructureId = function(structureId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'structureId' is set
      if (structureId == undefined || structureId == null) {
        throw new Error("Missing the required parameter 'structureId' when calling getUniverseStructuresStructureId");
      }


      var pathParams = {
        'structure_id': structureId
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = ['evesso'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetUniverseStructuresStructureIdOk;

      return this.apiClient.callApi(
        '/universe/structures/{structure_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUniverseSystems operation.
     * @callback module:api/UniverseApi~getUniverseSystemsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'Number'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get solar systems
     * Get a list of solar systems  ---  Alternate route: &#x60;/v1/universe/systems/&#x60;  Alternate route: &#x60;/legacy/universe/systems/&#x60;  Alternate route: &#x60;/dev/universe/systems/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/UniverseApi~getUniverseSystemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'Number'>}
     */
    this.getUniverseSystems = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['Number'];

      return this.apiClient.callApi(
        '/universe/systems/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUniverseSystemsSystemId operation.
     * @callback module:api/UniverseApi~getUniverseSystemsSystemIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetUniverseSystemsSystemIdOk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get solar system information
     * Get information on a solar system  ---  Alternate route: &#x60;/v2/universe/systems/{system_id}/&#x60;  Alternate route: &#x60;/dev/universe/systems/{system_id}/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param {Number} systemId system_id integer
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {module:model/String} opts.language Language to use in the response (default to en-us)
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/UniverseApi~getUniverseSystemsSystemIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetUniverseSystemsSystemIdOk}
     */
    this.getUniverseSystemsSystemId = function(systemId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'systemId' is set
      if (systemId == undefined || systemId == null) {
        throw new Error("Missing the required parameter 'systemId' when calling getUniverseSystemsSystemId");
      }


      var pathParams = {
        'system_id': systemId
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'language': opts['language'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetUniverseSystemsSystemIdOk;

      return this.apiClient.callApi(
        '/universe/systems/{system_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUniverseTypes operation.
     * @callback module:api/UniverseApi~getUniverseTypesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'Number'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get types
     * Get a list of type ids  ---  Alternate route: &#x60;/v1/universe/types/&#x60;  Alternate route: &#x60;/legacy/universe/types/&#x60;  Alternate route: &#x60;/dev/universe/types/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {Number} opts.page Which page to query
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/UniverseApi~getUniverseTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'Number'>}
     */
    this.getUniverseTypes = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'page': opts['page'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['Number'];

      return this.apiClient.callApi(
        '/universe/types/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUniverseTypesTypeId operation.
     * @callback module:api/UniverseApi~getUniverseTypesTypeIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetUniverseTypesTypeIdOk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get type information
     * Get information on a type  ---  Alternate route: &#x60;/v2/universe/types/{type_id}/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param {Number} typeId An Eve item type ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {module:model/String} opts.language Language to use in the response (default to en-us)
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/UniverseApi~getUniverseTypesTypeIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetUniverseTypesTypeIdOk}
     */
    this.getUniverseTypesTypeId = function(typeId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'typeId' is set
      if (typeId == undefined || typeId == null) {
        throw new Error("Missing the required parameter 'typeId' when calling getUniverseTypesTypeId");
      }


      var pathParams = {
        'type_id': typeId
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'language': opts['language'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetUniverseTypesTypeIdOk;

      return this.apiClient.callApi(
        '/universe/types/{type_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postUniverseNames operation.
     * @callback module:api/UniverseApi~postUniverseNamesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PostUniverseNames200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get names and categories for a set of ID&#39;s
     * Resolve a set of IDs to names and categories. Supported ID&#39;s for resolving are: Characters, Corporations, Alliances, Stations, Solar Systems, Constellations, Regions, Types.  ---  Alternate route: &#x60;/v2/universe/names/&#x60;  Alternate route: &#x60;/dev/universe/names/&#x60; 
     * @param {Array.<module:model/Number>} ids The ids to resolve
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/UniverseApi~postUniverseNamesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PostUniverseNames200Ok>}
     */
    this.postUniverseNames = function(ids, opts, callback) {
      opts = opts || {};
      var postBody = ids;

      // verify the required parameter 'ids' is set
      if (ids == undefined || ids == null) {
        throw new Error("Missing the required parameter 'ids' when calling postUniverseNames");
      }


      var pathParams = {
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [PostUniverseNames200Ok];

      return this.apiClient.callApi(
        '/universe/names/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
