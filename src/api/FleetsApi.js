/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.4.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DeleteFleetsFleetIdMembersMemberIdForbidden', 'model/DeleteFleetsFleetIdMembersMemberIdInternalServerError', 'model/DeleteFleetsFleetIdMembersMemberIdNotFound', 'model/DeleteFleetsFleetIdSquadsSquadIdForbidden', 'model/DeleteFleetsFleetIdSquadsSquadIdInternalServerError', 'model/DeleteFleetsFleetIdSquadsSquadIdNotFound', 'model/DeleteFleetsFleetIdWingsWingIdForbidden', 'model/DeleteFleetsFleetIdWingsWingIdInternalServerError', 'model/DeleteFleetsFleetIdWingsWingIdNotFound', 'model/GetFleetsFleetIdForbidden', 'model/GetFleetsFleetIdInternalServerError', 'model/GetFleetsFleetIdMembers200Ok', 'model/GetFleetsFleetIdMembersForbidden', 'model/GetFleetsFleetIdMembersInternalServerError', 'model/GetFleetsFleetIdMembersNotFound', 'model/GetFleetsFleetIdNotFound', 'model/GetFleetsFleetIdOk', 'model/GetFleetsFleetIdWings200Ok', 'model/GetFleetsFleetIdWingsForbidden', 'model/GetFleetsFleetIdWingsInternalServerError', 'model/GetFleetsFleetIdWingsNotFound', 'model/PostFleetsFleetIdMembersForbidden', 'model/PostFleetsFleetIdMembersInternalServerError', 'model/PostFleetsFleetIdMembersInvitation', 'model/PostFleetsFleetIdMembersNotFound', 'model/PostFleetsFleetIdMembersUnprocessableEntity', 'model/PostFleetsFleetIdWingsCreated', 'model/PostFleetsFleetIdWingsForbidden', 'model/PostFleetsFleetIdWingsInternalServerError', 'model/PostFleetsFleetIdWingsNotFound', 'model/PostFleetsFleetIdWingsWingIdSquadsCreated', 'model/PostFleetsFleetIdWingsWingIdSquadsForbidden', 'model/PostFleetsFleetIdWingsWingIdSquadsInternalServerError', 'model/PostFleetsFleetIdWingsWingIdSquadsNotFound', 'model/PutFleetsFleetIdBadRequest', 'model/PutFleetsFleetIdForbidden', 'model/PutFleetsFleetIdInternalServerError', 'model/PutFleetsFleetIdMembersMemberIdForbidden', 'model/PutFleetsFleetIdMembersMemberIdInternalServerError', 'model/PutFleetsFleetIdMembersMemberIdMovement', 'model/PutFleetsFleetIdMembersMemberIdNotFound', 'model/PutFleetsFleetIdMembersMemberIdUnprocessableEntity', 'model/PutFleetsFleetIdNewSettings', 'model/PutFleetsFleetIdNotFound', 'model/PutFleetsFleetIdSquadsSquadIdForbidden', 'model/PutFleetsFleetIdSquadsSquadIdInternalServerError', 'model/PutFleetsFleetIdSquadsSquadIdNaming', 'model/PutFleetsFleetIdSquadsSquadIdNotFound', 'model/PutFleetsFleetIdWingsWingIdForbidden', 'model/PutFleetsFleetIdWingsWingIdInternalServerError', 'model/PutFleetsFleetIdWingsWingIdNaming', 'model/PutFleetsFleetIdWingsWingIdNotFound'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DeleteFleetsFleetIdMembersMemberIdForbidden'), require('../model/DeleteFleetsFleetIdMembersMemberIdInternalServerError'), require('../model/DeleteFleetsFleetIdMembersMemberIdNotFound'), require('../model/DeleteFleetsFleetIdSquadsSquadIdForbidden'), require('../model/DeleteFleetsFleetIdSquadsSquadIdInternalServerError'), require('../model/DeleteFleetsFleetIdSquadsSquadIdNotFound'), require('../model/DeleteFleetsFleetIdWingsWingIdForbidden'), require('../model/DeleteFleetsFleetIdWingsWingIdInternalServerError'), require('../model/DeleteFleetsFleetIdWingsWingIdNotFound'), require('../model/GetFleetsFleetIdForbidden'), require('../model/GetFleetsFleetIdInternalServerError'), require('../model/GetFleetsFleetIdMembers200Ok'), require('../model/GetFleetsFleetIdMembersForbidden'), require('../model/GetFleetsFleetIdMembersInternalServerError'), require('../model/GetFleetsFleetIdMembersNotFound'), require('../model/GetFleetsFleetIdNotFound'), require('../model/GetFleetsFleetIdOk'), require('../model/GetFleetsFleetIdWings200Ok'), require('../model/GetFleetsFleetIdWingsForbidden'), require('../model/GetFleetsFleetIdWingsInternalServerError'), require('../model/GetFleetsFleetIdWingsNotFound'), require('../model/PostFleetsFleetIdMembersForbidden'), require('../model/PostFleetsFleetIdMembersInternalServerError'), require('../model/PostFleetsFleetIdMembersInvitation'), require('../model/PostFleetsFleetIdMembersNotFound'), require('../model/PostFleetsFleetIdMembersUnprocessableEntity'), require('../model/PostFleetsFleetIdWingsCreated'), require('../model/PostFleetsFleetIdWingsForbidden'), require('../model/PostFleetsFleetIdWingsInternalServerError'), require('../model/PostFleetsFleetIdWingsNotFound'), require('../model/PostFleetsFleetIdWingsWingIdSquadsCreated'), require('../model/PostFleetsFleetIdWingsWingIdSquadsForbidden'), require('../model/PostFleetsFleetIdWingsWingIdSquadsInternalServerError'), require('../model/PostFleetsFleetIdWingsWingIdSquadsNotFound'), require('../model/PutFleetsFleetIdBadRequest'), require('../model/PutFleetsFleetIdForbidden'), require('../model/PutFleetsFleetIdInternalServerError'), require('../model/PutFleetsFleetIdMembersMemberIdForbidden'), require('../model/PutFleetsFleetIdMembersMemberIdInternalServerError'), require('../model/PutFleetsFleetIdMembersMemberIdMovement'), require('../model/PutFleetsFleetIdMembersMemberIdNotFound'), require('../model/PutFleetsFleetIdMembersMemberIdUnprocessableEntity'), require('../model/PutFleetsFleetIdNewSettings'), require('../model/PutFleetsFleetIdNotFound'), require('../model/PutFleetsFleetIdSquadsSquadIdForbidden'), require('../model/PutFleetsFleetIdSquadsSquadIdInternalServerError'), require('../model/PutFleetsFleetIdSquadsSquadIdNaming'), require('../model/PutFleetsFleetIdSquadsSquadIdNotFound'), require('../model/PutFleetsFleetIdWingsWingIdForbidden'), require('../model/PutFleetsFleetIdWingsWingIdInternalServerError'), require('../model/PutFleetsFleetIdWingsWingIdNaming'), require('../model/PutFleetsFleetIdWingsWingIdNotFound'));
  } else {
    // Browser globals (root is window)
    if (!root.EveSwaggerInterface) {
      root.EveSwaggerInterface = {};
    }
    root.EveSwaggerInterface.FleetsApi = factory(root.EveSwaggerInterface.ApiClient, root.EveSwaggerInterface.DeleteFleetsFleetIdMembersMemberIdForbidden, root.EveSwaggerInterface.DeleteFleetsFleetIdMembersMemberIdInternalServerError, root.EveSwaggerInterface.DeleteFleetsFleetIdMembersMemberIdNotFound, root.EveSwaggerInterface.DeleteFleetsFleetIdSquadsSquadIdForbidden, root.EveSwaggerInterface.DeleteFleetsFleetIdSquadsSquadIdInternalServerError, root.EveSwaggerInterface.DeleteFleetsFleetIdSquadsSquadIdNotFound, root.EveSwaggerInterface.DeleteFleetsFleetIdWingsWingIdForbidden, root.EveSwaggerInterface.DeleteFleetsFleetIdWingsWingIdInternalServerError, root.EveSwaggerInterface.DeleteFleetsFleetIdWingsWingIdNotFound, root.EveSwaggerInterface.GetFleetsFleetIdForbidden, root.EveSwaggerInterface.GetFleetsFleetIdInternalServerError, root.EveSwaggerInterface.GetFleetsFleetIdMembers200Ok, root.EveSwaggerInterface.GetFleetsFleetIdMembersForbidden, root.EveSwaggerInterface.GetFleetsFleetIdMembersInternalServerError, root.EveSwaggerInterface.GetFleetsFleetIdMembersNotFound, root.EveSwaggerInterface.GetFleetsFleetIdNotFound, root.EveSwaggerInterface.GetFleetsFleetIdOk, root.EveSwaggerInterface.GetFleetsFleetIdWings200Ok, root.EveSwaggerInterface.GetFleetsFleetIdWingsForbidden, root.EveSwaggerInterface.GetFleetsFleetIdWingsInternalServerError, root.EveSwaggerInterface.GetFleetsFleetIdWingsNotFound, root.EveSwaggerInterface.PostFleetsFleetIdMembersForbidden, root.EveSwaggerInterface.PostFleetsFleetIdMembersInternalServerError, root.EveSwaggerInterface.PostFleetsFleetIdMembersInvitation, root.EveSwaggerInterface.PostFleetsFleetIdMembersNotFound, root.EveSwaggerInterface.PostFleetsFleetIdMembersUnprocessableEntity, root.EveSwaggerInterface.PostFleetsFleetIdWingsCreated, root.EveSwaggerInterface.PostFleetsFleetIdWingsForbidden, root.EveSwaggerInterface.PostFleetsFleetIdWingsInternalServerError, root.EveSwaggerInterface.PostFleetsFleetIdWingsNotFound, root.EveSwaggerInterface.PostFleetsFleetIdWingsWingIdSquadsCreated, root.EveSwaggerInterface.PostFleetsFleetIdWingsWingIdSquadsForbidden, root.EveSwaggerInterface.PostFleetsFleetIdWingsWingIdSquadsInternalServerError, root.EveSwaggerInterface.PostFleetsFleetIdWingsWingIdSquadsNotFound, root.EveSwaggerInterface.PutFleetsFleetIdBadRequest, root.EveSwaggerInterface.PutFleetsFleetIdForbidden, root.EveSwaggerInterface.PutFleetsFleetIdInternalServerError, root.EveSwaggerInterface.PutFleetsFleetIdMembersMemberIdForbidden, root.EveSwaggerInterface.PutFleetsFleetIdMembersMemberIdInternalServerError, root.EveSwaggerInterface.PutFleetsFleetIdMembersMemberIdMovement, root.EveSwaggerInterface.PutFleetsFleetIdMembersMemberIdNotFound, root.EveSwaggerInterface.PutFleetsFleetIdMembersMemberIdUnprocessableEntity, root.EveSwaggerInterface.PutFleetsFleetIdNewSettings, root.EveSwaggerInterface.PutFleetsFleetIdNotFound, root.EveSwaggerInterface.PutFleetsFleetIdSquadsSquadIdForbidden, root.EveSwaggerInterface.PutFleetsFleetIdSquadsSquadIdInternalServerError, root.EveSwaggerInterface.PutFleetsFleetIdSquadsSquadIdNaming, root.EveSwaggerInterface.PutFleetsFleetIdSquadsSquadIdNotFound, root.EveSwaggerInterface.PutFleetsFleetIdWingsWingIdForbidden, root.EveSwaggerInterface.PutFleetsFleetIdWingsWingIdInternalServerError, root.EveSwaggerInterface.PutFleetsFleetIdWingsWingIdNaming, root.EveSwaggerInterface.PutFleetsFleetIdWingsWingIdNotFound);
  }
}(this, function(ApiClient, DeleteFleetsFleetIdMembersMemberIdForbidden, DeleteFleetsFleetIdMembersMemberIdInternalServerError, DeleteFleetsFleetIdMembersMemberIdNotFound, DeleteFleetsFleetIdSquadsSquadIdForbidden, DeleteFleetsFleetIdSquadsSquadIdInternalServerError, DeleteFleetsFleetIdSquadsSquadIdNotFound, DeleteFleetsFleetIdWingsWingIdForbidden, DeleteFleetsFleetIdWingsWingIdInternalServerError, DeleteFleetsFleetIdWingsWingIdNotFound, GetFleetsFleetIdForbidden, GetFleetsFleetIdInternalServerError, GetFleetsFleetIdMembers200Ok, GetFleetsFleetIdMembersForbidden, GetFleetsFleetIdMembersInternalServerError, GetFleetsFleetIdMembersNotFound, GetFleetsFleetIdNotFound, GetFleetsFleetIdOk, GetFleetsFleetIdWings200Ok, GetFleetsFleetIdWingsForbidden, GetFleetsFleetIdWingsInternalServerError, GetFleetsFleetIdWingsNotFound, PostFleetsFleetIdMembersForbidden, PostFleetsFleetIdMembersInternalServerError, PostFleetsFleetIdMembersInvitation, PostFleetsFleetIdMembersNotFound, PostFleetsFleetIdMembersUnprocessableEntity, PostFleetsFleetIdWingsCreated, PostFleetsFleetIdWingsForbidden, PostFleetsFleetIdWingsInternalServerError, PostFleetsFleetIdWingsNotFound, PostFleetsFleetIdWingsWingIdSquadsCreated, PostFleetsFleetIdWingsWingIdSquadsForbidden, PostFleetsFleetIdWingsWingIdSquadsInternalServerError, PostFleetsFleetIdWingsWingIdSquadsNotFound, PutFleetsFleetIdBadRequest, PutFleetsFleetIdForbidden, PutFleetsFleetIdInternalServerError, PutFleetsFleetIdMembersMemberIdForbidden, PutFleetsFleetIdMembersMemberIdInternalServerError, PutFleetsFleetIdMembersMemberIdMovement, PutFleetsFleetIdMembersMemberIdNotFound, PutFleetsFleetIdMembersMemberIdUnprocessableEntity, PutFleetsFleetIdNewSettings, PutFleetsFleetIdNotFound, PutFleetsFleetIdSquadsSquadIdForbidden, PutFleetsFleetIdSquadsSquadIdInternalServerError, PutFleetsFleetIdSquadsSquadIdNaming, PutFleetsFleetIdSquadsSquadIdNotFound, PutFleetsFleetIdWingsWingIdForbidden, PutFleetsFleetIdWingsWingIdInternalServerError, PutFleetsFleetIdWingsWingIdNaming, PutFleetsFleetIdWingsWingIdNotFound) {
  'use strict';

  /**
   * Fleets service.
   * @module api/FleetsApi
   * @version 0.4.1
   */

  /**
   * Constructs a new FleetsApi. 
   * @alias module:api/FleetsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deleteFleetsFleetIdMembersMemberId operation.
     * @callback module:api/FleetsApi~deleteFleetsFleetIdMembersMemberIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Kick fleet member
     * Kick a fleet member  ---  Alternate route: &#x60;/v1/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/dev/fleets/{fleet_id}/members/{member_id}/&#x60; 
     * @param {Number} fleetId ID for a fleet
     * @param {Number} memberId The character ID of a member in this fleet
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.token Access token to use, if preferred over a header
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/FleetsApi~deleteFleetsFleetIdMembersMemberIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteFleetsFleetIdMembersMemberId = function(fleetId, memberId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'fleetId' is set
      if (fleetId == undefined || fleetId == null) {
        throw new Error("Missing the required parameter 'fleetId' when calling deleteFleetsFleetIdMembersMemberId");
      }

      // verify the required parameter 'memberId' is set
      if (memberId == undefined || memberId == null) {
        throw new Error("Missing the required parameter 'memberId' when calling deleteFleetsFleetIdMembersMemberId");
      }


      var pathParams = {
        'fleet_id': fleetId,
        'member_id': memberId
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = ['evesso'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/fleets/{fleet_id}/members/{member_id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFleetsFleetIdSquadsSquadId operation.
     * @callback module:api/FleetsApi~deleteFleetsFleetIdSquadsSquadIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete fleet squad
     * Delete a fleet squad, only empty squads can be deleted  ---  Alternate route: &#x60;/v1/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/dev/fleets/{fleet_id}/squads/{squad_id}/&#x60; 
     * @param {Number} fleetId ID for a fleet
     * @param {Number} squadId The squad to delete
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.token Access token to use, if preferred over a header
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/FleetsApi~deleteFleetsFleetIdSquadsSquadIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteFleetsFleetIdSquadsSquadId = function(fleetId, squadId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'fleetId' is set
      if (fleetId == undefined || fleetId == null) {
        throw new Error("Missing the required parameter 'fleetId' when calling deleteFleetsFleetIdSquadsSquadId");
      }

      // verify the required parameter 'squadId' is set
      if (squadId == undefined || squadId == null) {
        throw new Error("Missing the required parameter 'squadId' when calling deleteFleetsFleetIdSquadsSquadId");
      }


      var pathParams = {
        'fleet_id': fleetId,
        'squad_id': squadId
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = ['evesso'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/fleets/{fleet_id}/squads/{squad_id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFleetsFleetIdWingsWingId operation.
     * @callback module:api/FleetsApi~deleteFleetsFleetIdWingsWingIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete fleet wing
     * Delete a fleet wing, only empty wings can be deleted. The wing may contain squads, but the squads must be empty  ---  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/dev/fleets/{fleet_id}/wings/{wing_id}/&#x60; 
     * @param {Number} fleetId ID for a fleet
     * @param {Number} wingId The wing to delete
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.token Access token to use, if preferred over a header
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/FleetsApi~deleteFleetsFleetIdWingsWingIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteFleetsFleetIdWingsWingId = function(fleetId, wingId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'fleetId' is set
      if (fleetId == undefined || fleetId == null) {
        throw new Error("Missing the required parameter 'fleetId' when calling deleteFleetsFleetIdWingsWingId");
      }

      // verify the required parameter 'wingId' is set
      if (wingId == undefined || wingId == null) {
        throw new Error("Missing the required parameter 'wingId' when calling deleteFleetsFleetIdWingsWingId");
      }


      var pathParams = {
        'fleet_id': fleetId,
        'wing_id': wingId
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = ['evesso'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/fleets/{fleet_id}/wings/{wing_id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFleetsFleetId operation.
     * @callback module:api/FleetsApi~getFleetsFleetIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFleetsFleetIdOk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get fleet information
     * Return details about a fleet  ---  Alternate route: &#x60;/v1/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/dev/fleets/{fleet_id}/&#x60;   ---  This route is cached for up to 5 seconds
     * @param {Number} fleetId ID for a fleet
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.token Access token to use, if preferred over a header
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/FleetsApi~getFleetsFleetIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetFleetsFleetIdOk}
     */
    this.getFleetsFleetId = function(fleetId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'fleetId' is set
      if (fleetId == undefined || fleetId == null) {
        throw new Error("Missing the required parameter 'fleetId' when calling getFleetsFleetId");
      }


      var pathParams = {
        'fleet_id': fleetId
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = ['evesso'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetFleetsFleetIdOk;

      return this.apiClient.callApi(
        '/fleets/{fleet_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFleetsFleetIdMembers operation.
     * @callback module:api/FleetsApi~getFleetsFleetIdMembersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetFleetsFleetIdMembers200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get fleet members
     * Return information about fleet members  ---  Alternate route: &#x60;/v1/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/dev/fleets/{fleet_id}/members/&#x60;   ---  This route is cached for up to 5 seconds
     * @param {Number} fleetId ID for a fleet
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {module:model/String} opts.language Language to use in the response (default to en-us)
     * @param {String} opts.token Access token to use, if preferred over a header
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/FleetsApi~getFleetsFleetIdMembersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetFleetsFleetIdMembers200Ok>}
     */
    this.getFleetsFleetIdMembers = function(fleetId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'fleetId' is set
      if (fleetId == undefined || fleetId == null) {
        throw new Error("Missing the required parameter 'fleetId' when calling getFleetsFleetIdMembers");
      }


      var pathParams = {
        'fleet_id': fleetId
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'language': opts['language'],
        'token': opts['token'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = ['evesso'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [GetFleetsFleetIdMembers200Ok];

      return this.apiClient.callApi(
        '/fleets/{fleet_id}/members/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFleetsFleetIdWings operation.
     * @callback module:api/FleetsApi~getFleetsFleetIdWingsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetFleetsFleetIdWings200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get fleet wings
     * Return information about wings in a fleet  ---  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/dev/fleets/{fleet_id}/wings/&#x60;   ---  This route is cached for up to 5 seconds
     * @param {Number} fleetId ID for a fleet
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {module:model/String} opts.language Language to use in the response (default to en-us)
     * @param {String} opts.token Access token to use, if preferred over a header
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/FleetsApi~getFleetsFleetIdWingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetFleetsFleetIdWings200Ok>}
     */
    this.getFleetsFleetIdWings = function(fleetId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'fleetId' is set
      if (fleetId == undefined || fleetId == null) {
        throw new Error("Missing the required parameter 'fleetId' when calling getFleetsFleetIdWings");
      }


      var pathParams = {
        'fleet_id': fleetId
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'language': opts['language'],
        'token': opts['token'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = ['evesso'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [GetFleetsFleetIdWings200Ok];

      return this.apiClient.callApi(
        '/fleets/{fleet_id}/wings/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postFleetsFleetIdMembers operation.
     * @callback module:api/FleetsApi~postFleetsFleetIdMembersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create fleet invitation
     * Invite a character into the fleet, if a character has a CSPA charge set, it is not possible to invite them to the fleet using ESI  ---  Alternate route: &#x60;/v1/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/dev/fleets/{fleet_id}/members/&#x60; 
     * @param {Number} fleetId ID for a fleet
     * @param {module:model/PostFleetsFleetIdMembersInvitation} invitation Details of the invitation
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.token Access token to use, if preferred over a header
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/FleetsApi~postFleetsFleetIdMembersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.postFleetsFleetIdMembers = function(fleetId, invitation, opts, callback) {
      opts = opts || {};
      var postBody = invitation;

      // verify the required parameter 'fleetId' is set
      if (fleetId == undefined || fleetId == null) {
        throw new Error("Missing the required parameter 'fleetId' when calling postFleetsFleetIdMembers");
      }

      // verify the required parameter 'invitation' is set
      if (invitation == undefined || invitation == null) {
        throw new Error("Missing the required parameter 'invitation' when calling postFleetsFleetIdMembers");
      }


      var pathParams = {
        'fleet_id': fleetId
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = ['evesso'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/fleets/{fleet_id}/members/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postFleetsFleetIdWings operation.
     * @callback module:api/FleetsApi~postFleetsFleetIdWingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostFleetsFleetIdWingsCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create fleet wing
     * Create a new wing in a fleet  ---  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/dev/fleets/{fleet_id}/wings/&#x60; 
     * @param {Number} fleetId ID for a fleet
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.token Access token to use, if preferred over a header
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/FleetsApi~postFleetsFleetIdWingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostFleetsFleetIdWingsCreated}
     */
    this.postFleetsFleetIdWings = function(fleetId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'fleetId' is set
      if (fleetId == undefined || fleetId == null) {
        throw new Error("Missing the required parameter 'fleetId' when calling postFleetsFleetIdWings");
      }


      var pathParams = {
        'fleet_id': fleetId
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = ['evesso'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PostFleetsFleetIdWingsCreated;

      return this.apiClient.callApi(
        '/fleets/{fleet_id}/wings/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postFleetsFleetIdWingsWingIdSquads operation.
     * @callback module:api/FleetsApi~postFleetsFleetIdWingsWingIdSquadsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostFleetsFleetIdWingsWingIdSquadsCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create fleet squad
     * Create a new squad in a fleet  ---  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/{wing_id}/squads/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/{wing_id}/squads/&#x60;  Alternate route: &#x60;/dev/fleets/{fleet_id}/wings/{wing_id}/squads/&#x60; 
     * @param {Number} fleetId ID for a fleet
     * @param {Number} wingId The wing_id to create squad in
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.token Access token to use, if preferred over a header
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/FleetsApi~postFleetsFleetIdWingsWingIdSquadsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostFleetsFleetIdWingsWingIdSquadsCreated}
     */
    this.postFleetsFleetIdWingsWingIdSquads = function(fleetId, wingId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'fleetId' is set
      if (fleetId == undefined || fleetId == null) {
        throw new Error("Missing the required parameter 'fleetId' when calling postFleetsFleetIdWingsWingIdSquads");
      }

      // verify the required parameter 'wingId' is set
      if (wingId == undefined || wingId == null) {
        throw new Error("Missing the required parameter 'wingId' when calling postFleetsFleetIdWingsWingIdSquads");
      }


      var pathParams = {
        'fleet_id': fleetId,
        'wing_id': wingId
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = ['evesso'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PostFleetsFleetIdWingsWingIdSquadsCreated;

      return this.apiClient.callApi(
        '/fleets/{fleet_id}/wings/{wing_id}/squads/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putFleetsFleetId operation.
     * @callback module:api/FleetsApi~putFleetsFleetIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update fleet
     * Update settings about a fleet  ---  Alternate route: &#x60;/v1/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/dev/fleets/{fleet_id}/&#x60; 
     * @param {Number} fleetId ID for a fleet
     * @param {module:model/PutFleetsFleetIdNewSettings} newSettings What to update for this fleet
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.token Access token to use, if preferred over a header
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/FleetsApi~putFleetsFleetIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putFleetsFleetId = function(fleetId, newSettings, opts, callback) {
      opts = opts || {};
      var postBody = newSettings;

      // verify the required parameter 'fleetId' is set
      if (fleetId == undefined || fleetId == null) {
        throw new Error("Missing the required parameter 'fleetId' when calling putFleetsFleetId");
      }

      // verify the required parameter 'newSettings' is set
      if (newSettings == undefined || newSettings == null) {
        throw new Error("Missing the required parameter 'newSettings' when calling putFleetsFleetId");
      }


      var pathParams = {
        'fleet_id': fleetId
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = ['evesso'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/fleets/{fleet_id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putFleetsFleetIdMembersMemberId operation.
     * @callback module:api/FleetsApi~putFleetsFleetIdMembersMemberIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Move fleet member
     * Move a fleet member around  ---  Alternate route: &#x60;/v1/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/dev/fleets/{fleet_id}/members/{member_id}/&#x60; 
     * @param {Number} fleetId ID for a fleet
     * @param {Number} memberId The character ID of a member in this fleet
     * @param {module:model/PutFleetsFleetIdMembersMemberIdMovement} movement Details of the invitation
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.token Access token to use, if preferred over a header
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/FleetsApi~putFleetsFleetIdMembersMemberIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putFleetsFleetIdMembersMemberId = function(fleetId, memberId, movement, opts, callback) {
      opts = opts || {};
      var postBody = movement;

      // verify the required parameter 'fleetId' is set
      if (fleetId == undefined || fleetId == null) {
        throw new Error("Missing the required parameter 'fleetId' when calling putFleetsFleetIdMembersMemberId");
      }

      // verify the required parameter 'memberId' is set
      if (memberId == undefined || memberId == null) {
        throw new Error("Missing the required parameter 'memberId' when calling putFleetsFleetIdMembersMemberId");
      }

      // verify the required parameter 'movement' is set
      if (movement == undefined || movement == null) {
        throw new Error("Missing the required parameter 'movement' when calling putFleetsFleetIdMembersMemberId");
      }


      var pathParams = {
        'fleet_id': fleetId,
        'member_id': memberId
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = ['evesso'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/fleets/{fleet_id}/members/{member_id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putFleetsFleetIdSquadsSquadId operation.
     * @callback module:api/FleetsApi~putFleetsFleetIdSquadsSquadIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rename fleet squad
     * Rename a fleet squad  ---  Alternate route: &#x60;/v1/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/dev/fleets/{fleet_id}/squads/{squad_id}/&#x60; 
     * @param {Number} fleetId ID for a fleet
     * @param {module:model/PutFleetsFleetIdSquadsSquadIdNaming} naming New name of the squad
     * @param {Number} squadId The squad to rename
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.token Access token to use, if preferred over a header
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/FleetsApi~putFleetsFleetIdSquadsSquadIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putFleetsFleetIdSquadsSquadId = function(fleetId, naming, squadId, opts, callback) {
      opts = opts || {};
      var postBody = naming;

      // verify the required parameter 'fleetId' is set
      if (fleetId == undefined || fleetId == null) {
        throw new Error("Missing the required parameter 'fleetId' when calling putFleetsFleetIdSquadsSquadId");
      }

      // verify the required parameter 'naming' is set
      if (naming == undefined || naming == null) {
        throw new Error("Missing the required parameter 'naming' when calling putFleetsFleetIdSquadsSquadId");
      }

      // verify the required parameter 'squadId' is set
      if (squadId == undefined || squadId == null) {
        throw new Error("Missing the required parameter 'squadId' when calling putFleetsFleetIdSquadsSquadId");
      }


      var pathParams = {
        'fleet_id': fleetId,
        'squad_id': squadId
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = ['evesso'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/fleets/{fleet_id}/squads/{squad_id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putFleetsFleetIdWingsWingId operation.
     * @callback module:api/FleetsApi~putFleetsFleetIdWingsWingIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rename fleet wing
     * Rename a fleet wing  ---  Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/dev/fleets/{fleet_id}/wings/{wing_id}/&#x60; 
     * @param {Number} fleetId ID for a fleet
     * @param {module:model/PutFleetsFleetIdWingsWingIdNaming} naming New name of the wing
     * @param {Number} wingId The wing to rename
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.token Access token to use, if preferred over a header
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/FleetsApi~putFleetsFleetIdWingsWingIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putFleetsFleetIdWingsWingId = function(fleetId, naming, wingId, opts, callback) {
      opts = opts || {};
      var postBody = naming;

      // verify the required parameter 'fleetId' is set
      if (fleetId == undefined || fleetId == null) {
        throw new Error("Missing the required parameter 'fleetId' when calling putFleetsFleetIdWingsWingId");
      }

      // verify the required parameter 'naming' is set
      if (naming == undefined || naming == null) {
        throw new Error("Missing the required parameter 'naming' when calling putFleetsFleetIdWingsWingId");
      }

      // verify the required parameter 'wingId' is set
      if (wingId == undefined || wingId == null) {
        throw new Error("Missing the required parameter 'wingId' when calling putFleetsFleetIdWingsWingId");
      }


      var pathParams = {
        'fleet_id': fleetId,
        'wing_id': wingId
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = ['evesso'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/fleets/{fleet_id}/wings/{wing_id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
