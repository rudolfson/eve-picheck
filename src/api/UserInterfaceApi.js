/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.4.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/PostUiAutopilotWaypointForbidden', 'model/PostUiAutopilotWaypointInternalServerError', 'model/PostUiOpenwindowContractForbidden', 'model/PostUiOpenwindowContractInternalServerError', 'model/PostUiOpenwindowInformationForbidden', 'model/PostUiOpenwindowInformationInternalServerError', 'model/PostUiOpenwindowMarketdetailsForbidden', 'model/PostUiOpenwindowMarketdetailsInternalServerError', 'model/PostUiOpenwindowNewmailForbidden', 'model/PostUiOpenwindowNewmailInternalServerError', 'model/PostUiOpenwindowNewmailNewMail', 'model/PostUiOpenwindowNewmailUnprocessableEntity'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/PostUiAutopilotWaypointForbidden'), require('../model/PostUiAutopilotWaypointInternalServerError'), require('../model/PostUiOpenwindowContractForbidden'), require('../model/PostUiOpenwindowContractInternalServerError'), require('../model/PostUiOpenwindowInformationForbidden'), require('../model/PostUiOpenwindowInformationInternalServerError'), require('../model/PostUiOpenwindowMarketdetailsForbidden'), require('../model/PostUiOpenwindowMarketdetailsInternalServerError'), require('../model/PostUiOpenwindowNewmailForbidden'), require('../model/PostUiOpenwindowNewmailInternalServerError'), require('../model/PostUiOpenwindowNewmailNewMail'), require('../model/PostUiOpenwindowNewmailUnprocessableEntity'));
  } else {
    // Browser globals (root is window)
    if (!root.EveSwaggerInterface) {
      root.EveSwaggerInterface = {};
    }
    root.EveSwaggerInterface.UserInterfaceApi = factory(root.EveSwaggerInterface.ApiClient, root.EveSwaggerInterface.PostUiAutopilotWaypointForbidden, root.EveSwaggerInterface.PostUiAutopilotWaypointInternalServerError, root.EveSwaggerInterface.PostUiOpenwindowContractForbidden, root.EveSwaggerInterface.PostUiOpenwindowContractInternalServerError, root.EveSwaggerInterface.PostUiOpenwindowInformationForbidden, root.EveSwaggerInterface.PostUiOpenwindowInformationInternalServerError, root.EveSwaggerInterface.PostUiOpenwindowMarketdetailsForbidden, root.EveSwaggerInterface.PostUiOpenwindowMarketdetailsInternalServerError, root.EveSwaggerInterface.PostUiOpenwindowNewmailForbidden, root.EveSwaggerInterface.PostUiOpenwindowNewmailInternalServerError, root.EveSwaggerInterface.PostUiOpenwindowNewmailNewMail, root.EveSwaggerInterface.PostUiOpenwindowNewmailUnprocessableEntity);
  }
}(this, function(ApiClient, PostUiAutopilotWaypointForbidden, PostUiAutopilotWaypointInternalServerError, PostUiOpenwindowContractForbidden, PostUiOpenwindowContractInternalServerError, PostUiOpenwindowInformationForbidden, PostUiOpenwindowInformationInternalServerError, PostUiOpenwindowMarketdetailsForbidden, PostUiOpenwindowMarketdetailsInternalServerError, PostUiOpenwindowNewmailForbidden, PostUiOpenwindowNewmailInternalServerError, PostUiOpenwindowNewmailNewMail, PostUiOpenwindowNewmailUnprocessableEntity) {
  'use strict';

  /**
   * UserInterface service.
   * @module api/UserInterfaceApi
   * @version 0.4.1
   */

  /**
   * Constructs a new UserInterfaceApi. 
   * @alias module:api/UserInterfaceApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the postUiAutopilotWaypoint operation.
     * @callback module:api/UserInterfaceApi~postUiAutopilotWaypointCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set Autopilot Waypoint
     * Set a solar system as autopilot waypoint  ---  Alternate route: &#x60;/v2/ui/autopilot/waypoint/&#x60;  Alternate route: &#x60;/dev/ui/autopilot/waypoint/&#x60; 
     * @param {Boolean} addToBeginning Whether this solar system should be added to the beginning of all waypoints
     * @param {Boolean} clearOtherWaypoints Whether clean other waypoints beforing adding this one
     * @param {Number} destinationId The destination to travel to, can be solar system, station or structure&#39;s id
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.token Access token to use, if preferred over a header
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/UserInterfaceApi~postUiAutopilotWaypointCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.postUiAutopilotWaypoint = function(addToBeginning, clearOtherWaypoints, destinationId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'addToBeginning' is set
      if (addToBeginning == undefined || addToBeginning == null) {
        throw new Error("Missing the required parameter 'addToBeginning' when calling postUiAutopilotWaypoint");
      }

      // verify the required parameter 'clearOtherWaypoints' is set
      if (clearOtherWaypoints == undefined || clearOtherWaypoints == null) {
        throw new Error("Missing the required parameter 'clearOtherWaypoints' when calling postUiAutopilotWaypoint");
      }

      // verify the required parameter 'destinationId' is set
      if (destinationId == undefined || destinationId == null) {
        throw new Error("Missing the required parameter 'destinationId' when calling postUiAutopilotWaypoint");
      }


      var pathParams = {
      };
      var queryParams = {
        'add_to_beginning': addToBeginning,
        'clear_other_waypoints': clearOtherWaypoints,
        'datasource': opts['datasource'],
        'destination_id': destinationId,
        'token': opts['token'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = ['evesso'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/ui/autopilot/waypoint/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postUiOpenwindowContract operation.
     * @callback module:api/UserInterfaceApi~postUiOpenwindowContractCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Open Contract Window
     * Open the contract window inside the client  ---  Alternate route: &#x60;/v1/ui/openwindow/contract/&#x60;  Alternate route: &#x60;/legacy/ui/openwindow/contract/&#x60;  Alternate route: &#x60;/dev/ui/openwindow/contract/&#x60; 
     * @param {Number} contractId The contract to open
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.token Access token to use, if preferred over a header
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/UserInterfaceApi~postUiOpenwindowContractCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.postUiOpenwindowContract = function(contractId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'contractId' is set
      if (contractId == undefined || contractId == null) {
        throw new Error("Missing the required parameter 'contractId' when calling postUiOpenwindowContract");
      }


      var pathParams = {
      };
      var queryParams = {
        'contract_id': contractId,
        'datasource': opts['datasource'],
        'token': opts['token'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = ['evesso'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/ui/openwindow/contract/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postUiOpenwindowInformation operation.
     * @callback module:api/UserInterfaceApi~postUiOpenwindowInformationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Open Information Window
     * Open the information window for a character, corporation or alliance inside the client  ---  Alternate route: &#x60;/v1/ui/openwindow/information/&#x60;  Alternate route: &#x60;/legacy/ui/openwindow/information/&#x60;  Alternate route: &#x60;/dev/ui/openwindow/information/&#x60; 
     * @param {Number} targetId The target to open
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.token Access token to use, if preferred over a header
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/UserInterfaceApi~postUiOpenwindowInformationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.postUiOpenwindowInformation = function(targetId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'targetId' is set
      if (targetId == undefined || targetId == null) {
        throw new Error("Missing the required parameter 'targetId' when calling postUiOpenwindowInformation");
      }


      var pathParams = {
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'target_id': targetId,
        'token': opts['token'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = ['evesso'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/ui/openwindow/information/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postUiOpenwindowMarketdetails operation.
     * @callback module:api/UserInterfaceApi~postUiOpenwindowMarketdetailsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Open Market Details
     * Open the market details window for a specific typeID inside the client  ---  Alternate route: &#x60;/v1/ui/openwindow/marketdetails/&#x60;  Alternate route: &#x60;/legacy/ui/openwindow/marketdetails/&#x60;  Alternate route: &#x60;/dev/ui/openwindow/marketdetails/&#x60; 
     * @param {Number} typeId The item type to open in market window
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.token Access token to use, if preferred over a header
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/UserInterfaceApi~postUiOpenwindowMarketdetailsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.postUiOpenwindowMarketdetails = function(typeId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'typeId' is set
      if (typeId == undefined || typeId == null) {
        throw new Error("Missing the required parameter 'typeId' when calling postUiOpenwindowMarketdetails");
      }


      var pathParams = {
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token'],
        'type_id': typeId,
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = ['evesso'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/ui/openwindow/marketdetails/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postUiOpenwindowNewmail operation.
     * @callback module:api/UserInterfaceApi~postUiOpenwindowNewmailCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Open New Mail Window
     * Open the New Mail window, according to settings from the request if applicable  ---  Alternate route: &#x60;/v1/ui/openwindow/newmail/&#x60;  Alternate route: &#x60;/legacy/ui/openwindow/newmail/&#x60;  Alternate route: &#x60;/dev/ui/openwindow/newmail/&#x60; 
     * @param {module:model/PostUiOpenwindowNewmailNewMail} newMail The details of mail to create
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.token Access token to use, if preferred over a header
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/UserInterfaceApi~postUiOpenwindowNewmailCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.postUiOpenwindowNewmail = function(newMail, opts, callback) {
      opts = opts || {};
      var postBody = newMail;

      // verify the required parameter 'newMail' is set
      if (newMail == undefined || newMail == null) {
        throw new Error("Missing the required parameter 'newMail' when calling postUiOpenwindowNewmail");
      }


      var pathParams = {
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'token': opts['token'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = ['evesso'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/ui/openwindow/newmail/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
