/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.4.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/GetMarketsGroupsInternalServerError', 'model/GetMarketsGroupsMarketGroupIdInternalServerError', 'model/GetMarketsGroupsMarketGroupIdNotFound', 'model/GetMarketsGroupsMarketGroupIdOk', 'model/GetMarketsPrices200Ok', 'model/GetMarketsPricesInternalServerError', 'model/GetMarketsRegionIdHistory200Ok', 'model/GetMarketsRegionIdHistoryInternalServerError', 'model/GetMarketsRegionIdHistoryUnprocessableEntity', 'model/GetMarketsRegionIdOrders200Ok', 'model/GetMarketsRegionIdOrdersInternalServerError', 'model/GetMarketsRegionIdOrdersUnprocessableEntity', 'model/GetMarketsStructuresStructureId200Ok', 'model/GetMarketsStructuresStructureIdForbidden', 'model/GetMarketsStructuresStructureIdInternalServerError'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/GetMarketsGroupsInternalServerError'), require('../model/GetMarketsGroupsMarketGroupIdInternalServerError'), require('../model/GetMarketsGroupsMarketGroupIdNotFound'), require('../model/GetMarketsGroupsMarketGroupIdOk'), require('../model/GetMarketsPrices200Ok'), require('../model/GetMarketsPricesInternalServerError'), require('../model/GetMarketsRegionIdHistory200Ok'), require('../model/GetMarketsRegionIdHistoryInternalServerError'), require('../model/GetMarketsRegionIdHistoryUnprocessableEntity'), require('../model/GetMarketsRegionIdOrders200Ok'), require('../model/GetMarketsRegionIdOrdersInternalServerError'), require('../model/GetMarketsRegionIdOrdersUnprocessableEntity'), require('../model/GetMarketsStructuresStructureId200Ok'), require('../model/GetMarketsStructuresStructureIdForbidden'), require('../model/GetMarketsStructuresStructureIdInternalServerError'));
  } else {
    // Browser globals (root is window)
    if (!root.EveSwaggerInterface) {
      root.EveSwaggerInterface = {};
    }
    root.EveSwaggerInterface.MarketApi = factory(root.EveSwaggerInterface.ApiClient, root.EveSwaggerInterface.GetMarketsGroupsInternalServerError, root.EveSwaggerInterface.GetMarketsGroupsMarketGroupIdInternalServerError, root.EveSwaggerInterface.GetMarketsGroupsMarketGroupIdNotFound, root.EveSwaggerInterface.GetMarketsGroupsMarketGroupIdOk, root.EveSwaggerInterface.GetMarketsPrices200Ok, root.EveSwaggerInterface.GetMarketsPricesInternalServerError, root.EveSwaggerInterface.GetMarketsRegionIdHistory200Ok, root.EveSwaggerInterface.GetMarketsRegionIdHistoryInternalServerError, root.EveSwaggerInterface.GetMarketsRegionIdHistoryUnprocessableEntity, root.EveSwaggerInterface.GetMarketsRegionIdOrders200Ok, root.EveSwaggerInterface.GetMarketsRegionIdOrdersInternalServerError, root.EveSwaggerInterface.GetMarketsRegionIdOrdersUnprocessableEntity, root.EveSwaggerInterface.GetMarketsStructuresStructureId200Ok, root.EveSwaggerInterface.GetMarketsStructuresStructureIdForbidden, root.EveSwaggerInterface.GetMarketsStructuresStructureIdInternalServerError);
  }
}(this, function(ApiClient, GetMarketsGroupsInternalServerError, GetMarketsGroupsMarketGroupIdInternalServerError, GetMarketsGroupsMarketGroupIdNotFound, GetMarketsGroupsMarketGroupIdOk, GetMarketsPrices200Ok, GetMarketsPricesInternalServerError, GetMarketsRegionIdHistory200Ok, GetMarketsRegionIdHistoryInternalServerError, GetMarketsRegionIdHistoryUnprocessableEntity, GetMarketsRegionIdOrders200Ok, GetMarketsRegionIdOrdersInternalServerError, GetMarketsRegionIdOrdersUnprocessableEntity, GetMarketsStructuresStructureId200Ok, GetMarketsStructuresStructureIdForbidden, GetMarketsStructuresStructureIdInternalServerError) {
  'use strict';

  /**
   * Market service.
   * @module api/MarketApi
   * @version 0.4.1
   */

  /**
   * Constructs a new MarketApi. 
   * @alias module:api/MarketApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getMarketsGroups operation.
     * @callback module:api/MarketApi~getMarketsGroupsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'Number'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get item groups
     * Get a list of item groups  ---  Alternate route: &#x60;/v1/markets/groups/&#x60;  Alternate route: &#x60;/legacy/markets/groups/&#x60;  Alternate route: &#x60;/dev/markets/groups/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/MarketApi~getMarketsGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'Number'>}
     */
    this.getMarketsGroups = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['Number'];

      return this.apiClient.callApi(
        '/markets/groups/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMarketsGroupsMarketGroupId operation.
     * @callback module:api/MarketApi~getMarketsGroupsMarketGroupIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMarketsGroupsMarketGroupIdOk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get item group information
     * Get information on an item group  ---  Alternate route: &#x60;/v1/markets/groups/{market_group_id}/&#x60;  Alternate route: &#x60;/legacy/markets/groups/{market_group_id}/&#x60;  Alternate route: &#x60;/dev/markets/groups/{market_group_id}/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param {Number} marketGroupId An Eve item group ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {module:model/String} opts.language Language to use in the response (default to en-us)
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/MarketApi~getMarketsGroupsMarketGroupIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMarketsGroupsMarketGroupIdOk}
     */
    this.getMarketsGroupsMarketGroupId = function(marketGroupId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'marketGroupId' is set
      if (marketGroupId == undefined || marketGroupId == null) {
        throw new Error("Missing the required parameter 'marketGroupId' when calling getMarketsGroupsMarketGroupId");
      }


      var pathParams = {
        'market_group_id': marketGroupId
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'language': opts['language'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetMarketsGroupsMarketGroupIdOk;

      return this.apiClient.callApi(
        '/markets/groups/{market_group_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMarketsPrices operation.
     * @callback module:api/MarketApi~getMarketsPricesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetMarketsPrices200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List market prices
     * Return a list of prices  ---  Alternate route: &#x60;/v1/markets/prices/&#x60;  Alternate route: &#x60;/legacy/markets/prices/&#x60;  Alternate route: &#x60;/dev/markets/prices/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/MarketApi~getMarketsPricesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetMarketsPrices200Ok>}
     */
    this.getMarketsPrices = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [GetMarketsPrices200Ok];

      return this.apiClient.callApi(
        '/markets/prices/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMarketsRegionIdHistory operation.
     * @callback module:api/MarketApi~getMarketsRegionIdHistoryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetMarketsRegionIdHistory200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List historical market statistics in a region
     * Return a list of historical market statistics for the specified type in a region  ---  Alternate route: &#x60;/v1/markets/{region_id}/history/&#x60;  Alternate route: &#x60;/legacy/markets/{region_id}/history/&#x60;  Alternate route: &#x60;/dev/markets/{region_id}/history/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param {Number} regionId Return statistics in this region
     * @param {Number} typeId Return statistics for this type
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/MarketApi~getMarketsRegionIdHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetMarketsRegionIdHistory200Ok>}
     */
    this.getMarketsRegionIdHistory = function(regionId, typeId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'regionId' is set
      if (regionId == undefined || regionId == null) {
        throw new Error("Missing the required parameter 'regionId' when calling getMarketsRegionIdHistory");
      }

      // verify the required parameter 'typeId' is set
      if (typeId == undefined || typeId == null) {
        throw new Error("Missing the required parameter 'typeId' when calling getMarketsRegionIdHistory");
      }


      var pathParams = {
        'region_id': regionId
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'type_id': typeId,
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [GetMarketsRegionIdHistory200Ok];

      return this.apiClient.callApi(
        '/markets/{region_id}/history/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMarketsRegionIdOrders operation.
     * @callback module:api/MarketApi~getMarketsRegionIdOrdersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetMarketsRegionIdOrders200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List orders in a region
     * Return a list of orders in a region  ---  Alternate route: &#x60;/v1/markets/{region_id}/orders/&#x60;  Alternate route: &#x60;/legacy/markets/{region_id}/orders/&#x60;  Alternate route: &#x60;/dev/markets/{region_id}/orders/&#x60;   ---  This route is cached for up to 300 seconds
     * @param {module:model/String} orderType Filter buy/sell orders, return all orders by default. If you query without type_id, we always return both buy and sell orders. 
     * @param {Number} regionId Return orders in this region
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {Number} opts.page Which page to query, only used for querying without type_id. Starting at 1  (default to 1)
     * @param {Number} opts.typeId Return orders only for this type
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/MarketApi~getMarketsRegionIdOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetMarketsRegionIdOrders200Ok>}
     */
    this.getMarketsRegionIdOrders = function(orderType, regionId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'orderType' is set
      if (orderType == undefined || orderType == null) {
        throw new Error("Missing the required parameter 'orderType' when calling getMarketsRegionIdOrders");
      }

      // verify the required parameter 'regionId' is set
      if (regionId == undefined || regionId == null) {
        throw new Error("Missing the required parameter 'regionId' when calling getMarketsRegionIdOrders");
      }


      var pathParams = {
        'region_id': regionId
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'order_type': orderType,
        'page': opts['page'],
        'type_id': opts['typeId'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [GetMarketsRegionIdOrders200Ok];

      return this.apiClient.callApi(
        '/markets/{region_id}/orders/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMarketsStructuresStructureId operation.
     * @callback module:api/MarketApi~getMarketsStructuresStructureIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetMarketsStructuresStructureId200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List orders in a structure
     * Return all orders in a structure  ---  Alternate route: &#x60;/v1/markets/structures/{structure_id}/&#x60;  Alternate route: &#x60;/legacy/markets/structures/{structure_id}/&#x60;  Alternate route: &#x60;/dev/markets/structures/{structure_id}/&#x60;   ---  This route is cached for up to 300 seconds
     * @param {Number} structureId Return orders in this structure
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {Number} opts.page Which page to query, starting at 1 (default to 1)
     * @param {String} opts.token Access token to use, if preferred over a header
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/MarketApi~getMarketsStructuresStructureIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetMarketsStructuresStructureId200Ok>}
     */
    this.getMarketsStructuresStructureId = function(structureId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'structureId' is set
      if (structureId == undefined || structureId == null) {
        throw new Error("Missing the required parameter 'structureId' when calling getMarketsStructuresStructureId");
      }


      var pathParams = {
        'structure_id': structureId
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'page': opts['page'],
        'token': opts['token'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = ['evesso'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [GetMarketsStructuresStructureId200Ok];

      return this.apiClient.callApi(
        '/markets/structures/{structure_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
